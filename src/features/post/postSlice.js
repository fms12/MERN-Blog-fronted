import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  createPost,
  deletePost,
  fetchPostByFilters,
  fetchPostBySlug,
  updatePost,
} from "./postAPI";

const initialState = {
  posts: [],
  status: "idle",
  selectedPost: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createPostAsync = createAsyncThunk("post/create", async (post) => {
  const response = await createPost(post);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const fetchPostBySlugAsync = createAsyncThunk(
  "post/fetchPostBySlug",
  async (slug) => {
    const response = await fetchPostBySlug(slug);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchPostByFiltersAsync = createAsyncThunk(
  "post/fetchPostByFilters",
  async () => {
    const response = await fetchPostByFilters();
    // The value we return becomes the `fulfilled` action payload
    // console.log(response.data.data);
    return response.data.data;
  }
);

export const updatePostAsync = createAsyncThunk(
  "post/updatePost",
  async ({ update, slug }) => {
    const response = await updatePost({ update, slug });
    return response.data;
  }
);
export const deletePostAsync = createAsyncThunk(
  "post/deletePost",
  async (slug) => {
    const response = await deletePost(slug);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const postSlice = createSlice({
  name: "post",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSelectedPost: (state) => {
      state.selectedPost = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createPostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createPostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.posts.push(action.payload);
      })
      .addCase(fetchPostByFiltersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPostByFiltersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.posts = action.payload.posts;
      })
      .addCase(fetchPostBySlugAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPostBySlugAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.selectedPost = action.payload.data;
      })
      .addCase(updatePostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updatePostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.selectedPost.push(action.payload);
      })
      .addCase(deletePostAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deletePostAsync.fulfilled, (state, action) => {
        state.status = "idle";
        
        state.selectedPost = null;
      });
  },
});

export const { clearSelectedPost } = postSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

export const selectAllPosts = (state) => state.post.posts;
export const selectedPostBySlug = (state) => state.post.selectedPost;
export const selectPostListStatus = (state) => state.post.status;
export default postSlice.reducer;
